//
//  HOLSearchController.m
//
//  Created by Joe Cora on 3/20/10.
//  Copyright 2010 Ohio State University. All rights reserved.
//

#import "HOLSearchController.h"

// Private function declarations
@interface HOLSearchController()
- (void)cancelSearch;
@end

@implementation HOLSearchController

@synthesize searchBar;
@synthesize arrayTaxonResults;
@synthesize settings;

 // Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad {
	[super viewDidLoad];
	
	// Load controller content, if internet is enabled
	if (self.settings.isInternetEnabled) {
		// Customize table view
		
		// Create the title for the navigation bar
		[self.settings.taxonNaviBar setText:@"Hymenoptera Online"];
		
		// Add the search bar
		self.searchBar.frame = CGRectMake(0.0, 44.0, self.searchBar.frame.size.width, self.searchBar.frame.size.height);
		self.searchBar.autocorrectionType = UITextAutocorrectionTypeNo;
		
		self.tableView.tableHeaderView = self.searchBar;
	} else {
		UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:
							  @"A connection to the server could not be established" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
		[alert show];
		[alert release];
	}
}

// Override to allow orientations other than the default portrait orientation.
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    // Return YES for supported orientations
    return YES;
}

- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration {
	if (toInterfaceOrientation == UIInterfaceOrientationPortrait || toInterfaceOrientation == UIInterfaceOrientationPortraitUpsideDown) {
		[self.navigationController setNavigationBarHidden:NO];
	} else {
		[self.navigationController setNavigationBarHidden:YES];
	}
}

#pragma mark -
#pragma mark Search bar delegate

- (void)searchBarTextDidBeginEditing:(UISearchBar *)theSearchBar {
	self.tableView.scrollEnabled = NO;
	
	// Show the cancel button
	[self.searchBar setShowsCancelButton:YES animated:YES];
}

- (void)searchBar:(UISearchBar *)theSearchBar textDidChange:(NSString *)searchText {
}

- (void)searchBarSearchButtonClicked:(UISearchBar *)theSearchBar {
	[self searchTableView];
	
	[self cancelSearch];
}

- (void)searchBarCancelButtonClicked:(UISearchBar *)theSearchBar {
	[self cancelSearch];
}

#pragma mark -
#pragma mark Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    // Return the number of sections
	return 1;
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
	// Number of rows it should expect should be based on the section
	return [self.arrayTaxonResults count];
}

- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
	return @"Taxon Search Results";
}

// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *cellIdentifier = @"Cell";
    
    UITableViewCell *cell = (UITableViewCell *)[tableView dequeueReusableCellWithIdentifier:cellIdentifier];
	
	if (cell == nil) {
		cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:cellIdentifier] autorelease];
	}
	
	// Get the cell value
	NSDictionary *dictResult = [self.arrayTaxonResults objectAtIndex:indexPath.row];
	
	cell.textLabel.text = [NSString stringWithFormat:@"%@ %@", [dictResult objectForKey:@"name"], [dictResult objectForKey:@"author"]];
	cell.detailTextLabel.text = [NSString stringWithFormat:@"Rank: %@, Validity: %@", [dictResult objectForKey:@"rank"], [dictResult objectForKey:@"valid"]];
	cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
	
	return cell;
}


#pragma mark -
#pragma mark Table view delegate

/*
- (NSIndexPath *)tableView:(UITableView *)tableView willSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	HOLCell *cell = (HOLCell *)[tableView cellForRowAtIndexPath:indexPath];
	
	NSArray *cellArray = [[NSArray alloc] initWithObjects:indexPath, nil];
	
	[tableView reloadRowsAtIndexPaths:cellArray withRowAnimation:UITableViewRowAnimationNone];
	
	return indexPath;
}
 */

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	// Show loading image
	[[NSNotificationCenter defaultCenter] postNotificationName:@"HOLSHOWLOADING" object:self];
	
	// Set new tnuid
	[self.settings updateTNUID:[[self.arrayTaxonResults objectAtIndex:indexPath.row] objectForKey:@"id"]];
	
	// Show selected taxon
	[self performSelector:@selector(showNewTaxon) withObject:nil afterDelay:0.0];
}

#pragma mark -
#pragma mark Memory management

- (void)didReceiveMemoryWarning {
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
	self.searchBar = nil;
}

- (void)dealloc {
	[self.settings release];
	[self.arrayTaxonResults release];
	[self.searchBar release];
    [super dealloc];
}

// Public functions
- (id)initWithSettings:(HOLSettings *)loadSettings {
	self = [super initWithNibName:@"HOLSearch" bundle:[NSBundle mainBundle]];
	
	self.settings = loadSettings;
	
	return self;
}

- (void)searchTableView {
	NSString *searchText = self.searchBar.text;
	
	if ([searchText length] > 2) {
		// Get the general information for taxon from server
		HOLServerInteraction *server = [[HOLServerInteraction alloc] initWithSettings:self.settings];
		NSDictionary *dictInfo = [server getSearchResultsFromString:searchText];
		
		[server release];
		
		// Check if results were available (internet enabled)
		if (dictInfo != nil) {
			self.arrayTaxonResults = [[dictInfo objectForKey:@"taxon_results"] objectForKey:@"taxa"];
		} else {
			UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Server communication error" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
			[alert show];
			[alert release]; 
		}
	} else {
		UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Search must be at least 3 characters long." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
		[alert show];
		[alert release]; 
	}
}

// Private functions
- (void)cancelSearch {
	[self.searchBar resignFirstResponder];
	
	self.tableView.scrollEnabled = YES;
	
	// Hide the cancel button
	[self.searchBar setShowsCancelButton:NO animated:YES];
	
	[self.tableView reloadData];
}

- (void)showNewTaxon {
	// Send message to load new taxon page
	[[NSNotificationCenter defaultCenter] postNotificationName:@"HOLLOADNEWTAXON" object:self];
}

@end
